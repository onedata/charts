apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" . }}
    heritage: {{ .Release.Service }}
    component: {{ .Chart.Name }}
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      chart: {{ .Chart.Name }}
      release: {{ template "releaseName" . }}
      heritage: {{ .Release.Service }}
      component: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}
        release: {{ template "releaseName" . }}
        heritage: {{ .Release.Service }}
        component: {{ .Chart.Name }}
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostname: {{ .Chart.Name }}
      subdomain: {{ template "fullname" . }}
      hostNetwork: {{ template "hostNetwork" . }}
      terminationGracePeriodSeconds: 3
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      {{- if index .Values "wait_for_onezone" "enabled" }}
      initContainers:
        - name: wait-for-onezone
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - "{{ template "onezone_name" . }}-ready-check"
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        ports:
          - containerPort: 8080
        lifecycle:
          postStart:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - >
                  registrationPayLoad='{ "name" : "Mock Handle Service", "proxyEndpoint" : "{{ template "handle-proxy-mock_service_url" . }}/api/v1", "serviceProperties" : {"type": "PID"}}' ;
                  echo "$registrationPayLoad" > handle_mock_register.json ;
                  curl -ksS -u {{ index (first .Values.onepanel_admin_users) "name" }}:{{ index (first .Values.onepanel_admin_users) "password" }} -v -X POST -H "Content-type: application/json" -d @handle_mock_register.json https://{{ template "onezone_service_url" . }}/api/v3/onezone/handle_services > /log 2>&1 ;
                  echo "Service Resistration Log:" ;
                  cat /log ;
                  serviceUrl=$(cat /log | grep '< location:' | cut -d ':' -f 2- | tr -d '[:cntrl:]' | tr -dc '[:print:]');
                  echo "Got service location url: $serviceUrl";
                  refreshUsersList() {
                    curl -k -u {{ index (first .Values.onepanel_admin_users) "name" }}:{{ index (first .Values.onepanel_admin_users) "password" }} https://{{ template "onezone_service_url" . }}/api/v3/onezone/users | jq -r '.users[]' | xargs -I{} curl -k -u {{ index (first .Values.onepanel_admin_users) "name" }}:{{ index (first .Values.onepanel_admin_users) "password" }} https://{{ template "onezone_service_url" . }}/api/v3/onezone/users/{} | jq -r 'select(.username != null) | .username+ ":" + .userId' > /users
                  } ;
                  refreshUsersList ;
                  {{- range .Values.users }}
                  while ! grep -q {{ .name }} /users ; do sleep 3 ; refreshUsersList ; done ;
                  userId=$(grep {{ .name }} /users | cut -d ':' -f2) ;
                  curl -ksS -u {{ index (first $.Values.onepanel_admin_users) "name" }}:{{ index (first $.Values.onepanel_admin_users) "password" }} -vvv -X PUT -H "Content-type: application/json" $serviceUrl/users/$userId > {{ .name }}.log 2>&1 ;
                  {{- end }}
