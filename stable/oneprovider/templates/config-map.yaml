apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" .  }}
    heritage: {{ .Release.Service }}
    component: "oneprovider"
  annotations:
    version: "{{ .Chart.Version }}"
data:
{{- if .Values.graphite.enabled }}
  date: {{ now | date "2006-01-02_15:04:05" }}
{{- end }}
  panel-overlay.config: {{ toYaml .Values.panelOverlayConfig | indent 2 }}
  worker-overlay.config: {{ toYaml .Values.workerOverlayConfig | indent 2 }}
{{- if .Values.graphite.enabled}}
  graphite.config: |-
    [{cluster_worker, [
      {graphite_host, "{{ .Values.graphite.host }}"},
      {graphite_api_key, "{{ .Values.graphite.apiKey }}"},
      {integrate_with_graphite, {{ .Values.graphite.enabled }} },
      {graphite_prefix, "GRAPHITE_PREFIX_SUPPLIED_AT_RUNTIME"}
    ]}].
{{- end }}
{{- if .Values.openfaas.enabled}}
  openfaas.config: |-
    [{op_worker, [
      {openfaas_host, <<"{{ template "openfaas_name" . }}-gateway">>},
      {openfaas_port, 8080},
      {openfaas_function_namespace, <<"{{ $.Release.Namespace }}">> },
      {openfaas_oneclient_image, <<"{{ .Values.oneclient.image }}">> },
      {openfaas_oneclient_flags, <<"{{ .Values.oneclient.lambda_sidecar_flags }}">> },
      {openfaas_result_streamer_image, <<"{{ index .Values "openfaas-lambda-result-streamer" "image" }}">> },
      {openfaas_admin_username, <<"admin">> },
      {openfaas_admin_password,<< "password">>},
      {openfaas_function_constraints, []},
      {openfaas_function_labels, #{}},
      {openfaas_function_limits, #{}},
      {openfaas_function_annotations, #{}},
      {openfaas_function_requests, #{}},
      {openfaas_function_env, #{"read_timeout" => "604800s",
                                "write_timeout" => "604800s",
                                "exec_timeout" => "604800s"}}
    {{- if index .Values "openfaas-pod-status-monitor" "enabled"}}
      ,{openfaas_activity_feed_secret, "{{ index .Values "openfaas-pod-status-monitor" "secret" }}" }
    {{- end }}
      ]}
    ].
{{- end }}
{{- range $fileName, $config := (index .Values "panelExtraOverlayConfigs") }}
  panel-{{ $fileName }}: {{ toYaml $config | indent 2 }}
{{- end }}
{{- range $fileName, $config := (index .Values "workerExtraOverlayConfigs") }}
  worker-{{ $fileName }}: {{ toYaml $config | indent 2 }}
{{- end }}
  ONEPROVIDER_CONFIG: |-
    cluster:
      domainName: "{{ template "service_url" . }}"
      nodes:
        {{- $r := . -}}
        {{- range $i := until (int (.Values.oneprovider_nodes_count)) }}
        n{{ $i }}: 
          hostname: {{ template "fullname" $r }}-{{ $i }}
        {{- end }}
      managers:
    {{- if .Values.cluster_config.managers }}
        mainNode: n{{ first .Values.cluster_config.managers }} 
    {{- else }}
        mainNode: n0
    {{- end }}
        nodes:
    {{- with .Values.cluster_config.managers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      workers:
        nodes:
    {{- with .Values.cluster_config.workers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      databases:
        nodes:
    {{- with .Values.cluster_config.databases }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      {{- if or (eq (int .Values.oneprovider_nodes_count) 1) (or (index .Values "external-storages") (or (index .Values "volume-s3" "enabled")) (or (index .Values "volume-ceph" "enabled") (or (index .Values "volume-gluster" "enabled") (index .Values "volume-swift" "enabled")))) }}
      storages:
      {{- end }}
      {{- if and (index .Values "posix" "enabled") (eq (int .Values.oneprovider_nodes_count) 1) }}
        posix:
          type: posix
          mountPoint: {{ index .Values "posix" "storagePath" }}
          skipStorageDetection: {{ index .Values "posix" "readOnly" }}
        {{- if (index .Values "posix" "importedStorage") }}
          importedStorage: {{ index .Values "posix" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "posix" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-nfs" "enabled") }}
        {{- if (index .Values "volume-nfs" "exports") }}{{- range $export := (index .Values "volume-nfs" "exports" ) }}
        nfs-{{ $export.name }}:
          type: posix
          mountPoint: /volumes/nfs-{{ $export.name }}
          skipStorageDetection: {{ index $export "readOnly" }}
        {{- if (index $export "image") }}
          importedStorage: true
        {{- end }}
        {{- if (index $export "luma-enabled") }}
          lumaEnabled: {{ $.Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" $ }}/api/v3/luma
          lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ $.Values.luma.lumaApiKey }}
        {{- end }}
        {{- end }}{{- end }}
      {{- end }}
      {{- if (index .Values "volume-nfs-native" "enabled") }}
        {{- if (index .Values "volume-nfs-native" "exports") }}{{- range $export := (index .Values "volume-nfs-native" "exports" ) }}
        nfs-native-{{ $export.name }}:
          type: nfs
          {{- if $export.hostname }}
          host: {{ $export.hostname }}
          {{- else if (index $.Values "volume-nfs-native" "hostname") }}
          host: {{ (index $.Values "volume-nfs-native" "hostname") }}
          {{- else }}
          host: {{ template "volume-nfs_name" $ }}.{{ $.Release.Namespace }}
          {{- end }}
          version: {{ default (index $.Values "volume-nfs-native" "version") $export.version }}
          volume: /exports/{{ default (index $.Values "volume-nfs-native" "name") $export.name }}
          connectionPoolSize: {{ default (index $.Values "volume-nfs-native" "connectionPoolSize") $export.connectionPoolSize }}
          dirCache: {{ default (index $.Values "volume-nfs-native" "dirCache") $export.dirCache }}
          readAhead: {{ default (index $.Values "volume-nfs-native" "readAhead") $export.readAhead }}
          autoReconnect: {{ default (index $.Values "volume-nfs-native" "autoReconnect") $export.autoReconnect }}
          storagePathType: {{ default (index $.Values "volume-nfs-native" "storagePathType") $export.storagePathType }}
          skipStorageDetection: {{ index $export "readOnly" }}
        {{- if (index $export "image") }}
          importedStorage: true
        {{- end }}
        {{- end }}{{- end }}
      {{- end }}
      {{- if (index .Values "volume-s3" "enabled") }}
        s3:
          type: s3
          hostname: {{ template "volume-s3_name" . }}.{{ $.Release.Namespace }}:{{ index .Values "volume-s3" "port" }}
          bucketName: {{ index .Values "volume-s3" "bucketName" }}
          accessKey: {{ index .Values "volume-s3" "key_id" }}
          secretKey: {{ index .Values "volume-s3" "access_key" }}
          skipStorageDetection: {{ index .Values "volume-s3" "readOnly" }}
          insecure: {{ index .Values "volume-s3" "insecure" }}
        {{- if (index .Values "volume-s3" "importedStorage") }}
          importedStorage: {{ index .Values "volume-s3" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-s3" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-ceph" "enabled") }}
        ceph:
          type: cephrados
          username: {{ index .Values "volume-ceph" "username" }}
          key: {{ index .Values "volume-ceph" "key" }}
          monitorHostname: {{ template "volume-ceph_name" . }}.{{ $.Release.Namespace }}
          clusterName: {{ index .Values "volume-ceph" "cluster_name" }}
          poolName: {{ index .Values "volume-ceph" "pool_name" }}
          skipStorageDetection: {{ index .Values "volume-ceph" "readOnly" }}
          insecure: {{ index .Values "volume-ceph" "insecure" }}
        {{- if (index .Values "volume-ceph" "importedStorage") }}
          importedStorage: {{ index .Values "volume-ceph" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-ceph" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-gluster" "enabled") }}
        gluster:
          type: glusterfs
          hostname: {{ template "volume-gluster_name" . }}.{{ $.Release.Namespace }}
          volume: {{ index .Values "volume-gluster" "volumeName" }}
          transport: tcp
          skipStorageDetection: {{ index .Values "volume-gluster" "readOnly" }}
          insecure: {{ index .Values "volume-gluster" "insecure" }}
        {{- if (index .Values "volume-gluster" "importedStorage") }}
          importedStorage: {{ index .Values "volume-gluster" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-gluster" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-swift" "enabled") }}
        swift:
          type: swift
          authUrl: http://{{ template "volume-swift_name" . }}.{{ $.Release.Namespace }}:5000/v2.0/tokens
          tenantName: {{ index .Values "volume-swift" "tenantName" }}
          containerName: {{ index .Values "volume-swift" "containerName" }}
          username: {{ index .Values "volume-swift" "username" }}
          password: {{ index .Values "volume-swift" "password" }}
          skipStorageDetection: {{ index .Values "volume-swift" "readOnly" }}
          insecure: {{ index .Values "volume-swift" "insecure" }}
        {{- if (index .Values "volume-swift" "importedStorage") }}
          importedStorage: {{ index .Values "volume-swift" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-swift" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-webdav" "enabled") }}
        webdav:
          type: webdav
          endpoint: http://{{ template "volume-webdav_name" . }}.{{ $.Release.Namespace }}
          credentials: {{ index .Values "volume-webdav" "username" }}:{{ index .Values "volume-webdav" "password" }}
          credentialsType: {{ index .Values "volume-webdav" "credentialsType" }}
          rangeWriteSupport: {{ index .Values "volume-webdav" "rangeWriteSupport" }}
          verifyServerCertificate: {{ index .Values "volume-webdav" "verifyServerCertificate" }}
          skipStorageDetection: {{ index .Values "volume-webdav" "readOnly" }}
          insecure: {{ index .Values "volume-webdav" "insecure" }}
        {{- if (index .Values "volume-webdav" "importedStorage") }}
          importedStorage: {{ index .Values "volume-webdav" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-swift" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-dcache" "enabled") }}
        dcache:
          type: webdav
          endpoint: http://{{ template "volume-dcache_name" . }}.{{ $.Release.Namespace }}
          credentials: {{ index .Values "volume-dcache" "username" }}:{{ index .Values "volume-webdav" "password" }}
          credentialsType: {{ index .Values "volume-dcache" "credentialsType" }}
          rangeWriteSupport: {{ index .Values "volume-dcache" "rangeWriteSupport" }}
          verifyServerCertificate: {{ index .Values "volume-dcache" "verifyServerCertificate" }}
          skipStorageDetection: {{ index .Values "volume-dcache" "readOnly" }}
          insecure: {{ index .Values "volume-dcache" "insecure" }}
        {{- if (index .Values "volume-dcache" "importedStorage") }}
          importedStorage: {{ index .Values "volume-dcache" "importedStorage" }}
        {{- end }}
        {{- if (index .Values "volume-dcache" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" . }}/api/v3/luma
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if and (index .Values "volume-data-sync" "enabled") (eq (int .Values.oneprovider_nodes_count) 1) }}
        {{- range $volume := (index .Values "volume-data-sync" "volumes") }}
        {{ $volume.name }}:
          type: posix
          mountPoint: /volumes/{{ $volume.name }}
          skipStorageDetection: {{ $volume.readOnly }}
          importedStorage: true
        {{- if (index . "luma-enabled") }}
          lumaEnabled: {{ $.Values.luma.enabled }}
          lumaUrl: http://{{ template "luma_name" $ }}/api/v3/luma
          lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ $.Values.luma.lumaApiKey }}
        {{- end }}
        {{- end -}}
      {{- end }}
      {{- if (index .Values "external-storages") }}
{{ toYaml (index .Values "external-storages") | indent 8 }}
      {{- end }}
    oneprovider:
      register: true
      {{ if .Values.name -}}
      name: {{ .Values.name }}
      {{- else -}}
      name: {{ template "fullname" . }}
      {{- end }}
      # Depending on Onedata version, one of 2 keys below will be used
      redirectionPoint: https://{{ template "oneprovider_service_url" . }}
      domain: {{ template "oneprovider_service_url" . }} # OR IP ADDRESS
      # Oneprovider Registration token acquired in runtime from Onezone
{{- if .Values.global }}{{- if not (index .Values "global" "v21") }}
      # Oneprovider Registration token acquired in runtime from Onezone
      {{- if (index .Values "onezone-registration-token" "enabled") }}
      token: ONEPROVIDER_REGISTRATION_TOKEN_SUPPLIED_AT_RUNTIME
      {{- else }}
      token: {{ (index $.Values "onezone-registration-token" "value") }}
      {{- end }}
{{- end }}{{- end }}
{{- if .Values.global }}{{- if (index .Values "global" "v21") }}
      {{- if (index .Values "onezone-registration-token" "enabled") }}
      tokenProvisionMethod: fromFile
      tokenFile: /onezone-registration-token/token
      {{- else }}
      token: {{ (index $.Values "onezone-registration-token" "value") }}
      {{- end }}
{{- end }}{{- end }}
      # Subdomain feature is currently not supported in k8s
      subdomainDelegation: false
      adminEmail: {{ .Values.adminEmail }}
      geoLatitude: {{ .Values.geoLatitude }}
      geoLongitude: {{ .Values.geoLongitude }}
    # TODO: make it possible for onedata services to communicate using 
    # system configured DNS. this will allow to put here just service name
    # instead of FQDN
