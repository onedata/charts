{{- if .Values.groups }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-groups
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ template "releaseName" . }}"
    heritage: "{{ .Release.Service }}"
    job: {{ template "fullname" . }}-groups
    component: {{ .Chart.Name }}-groups
    dependency-level: "4"
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  backoffLimit: 1
  template:
    metadata:
      name: "{{ template "releaseName" . }}"
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ template "releaseName" . }}"
        heritage: "{{ .Release.Service }}"
        job: {{ template "fullname" . }}-groups
        component: {{ .Chart.Name }}-groups
        dependency-level: "4"
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostNetwork: {{ template "hostNetwork" . }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if (index .Values "wait_for_users" "enabled") }}
      initContainers:
        - name: wait-for-users
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - >
              -l release in ({{ template "releaseName" . }}), chart in ({{ .Chart.Name }}), dependency-level notin (0,1,2,3,4)
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      restartPolicy: Never
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        env:
          - name: ONEZONE_HOST
            value: "https://{{ template "onezone_name" . }}"
          - name: ONEZONE_API_KEY
            value: "supplied_at_runtime"
          - name: ONEPANEL_BASIC_AUTH
            value: "{{ template "onepanel_emergency_username_template" . }}:{{ template "onepanel_emergency_password_template" . }}"
          - name: ONEPROVIDER_HOST
            value: "https://{{ template "oneprovider_name" . }}"
          - name: ONEPANEL_HOST
            value: "https://{{ template "onezone_name" . }}:9443"
          - name: KEYCLOAK_HOST
            value: "http://{{ template "keycloak_service_url" . }}"
          - name: TERM # otherwise zsh and bash autocompletion used in this container tends to go crazy
            value: "xterm-256color"
        command:
          - "bash"
          - "-c"
          - >
            set -e;
            echo "-k" > ~/.curlrc ; echo "-f" >> ~/.curlrc ;
            echo "Getting token:" ;
            export ONEZONE_API_KEY="$(curl --silent -k -u $ONEPANEL_BASIC_AUTH -X POST -d '' -H 'content-type: application/json' $ONEZONE_HOST/api/v3/onezone/user/client_tokens)" ;
            echo "Curl output:" ;
            echo "$ONEZONE_API_KEY" ;
            export ONEZONE_API_KEY="$(echo "$ONEZONE_API_KEY" | jq -r .token)" ;
            echo "ONEZONE_HOST=$ONEZONE_HOST" ;
            echo "ONEPANEL_BASIC_AUTH=$ONEPANEL_BASIC_AUTH" ;
            echo "ONEZONE_API_KEY=$ONEZONE_API_KEY" ;
            export KEYCLOAK_VARS_INITIALIZED="False" ;
            {{ template "onedata-chart-utils.createGroupFun" $ }}
          {{- range .Values.groups }}{{ if (hasKey . "idps"  )}}
          {{ if (hasKey .idps "onezone" )}}{{if .idps.onezone.enabled }}
            printf "Creating group {{ .name }} [response: " ;
            onezone-rest-cli -w "'%{http_code}'" -u {{ template "admin_username_template" $ }}:{{ template "admin_password_template" $ }} createGroupForUser name=='{{ .name }}'{{- if .type }} type=role{{- end }} ;
            echo "] Success." ;
          {{- end }}{{- end }}
          {{- if (hasKey .idps "keycloak")}}{{- if (hasKey .idps.keycloak "mode" )}}{{ if and (.idps.keycloak.enabled) (not .idps.keycloak.child) (eq .idps.keycloak.mode "duringCrossSupportJob")}}
            if [[ ${KEYCLOAK_VARS_INITIALIZED} == "False" ]] ; then
              realmId={{ template "keycloak_realmId_template" $ }} ;
              keycloak_url=${KEYCLOAK_HOST} ;
              export KEYCLOAK_TOKEN={{ template "onedata-chart-utils.createKeycloakToken" $ }} ;
              KEYCLOAK_VARS_INITIALIZED="True" ;
            fi ;
          {{ template "onedata-chart-utils.createKeycloakGroup" dict "root" . "parentId" "root" }}
          {{- end }}{{- end }}{{- end }}
          {{- end }}{{- end }}
{{- end }}
