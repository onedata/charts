apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ template "releaseName" . }}"
    heritage: "{{ .Release.Service }}"
    component: {{ .Chart.Name }}
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      chart: {{ .Chart.Name }}
      release: {{ template "releaseName" . }}
      heritage: {{ .Release.Service }}
      component: {{ .Chart.Name }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ template "releaseName" . }}"
        heritage: "{{ .Release.Service }}"
        component: {{ .Chart.Name }}
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostname: {{ .Chart.Name }}
      subdomain: {{ template "fullname" . }}
      hostNetwork: {{ template "hostNetwork" . }}
      terminationGracePeriodSeconds: 3
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      {{- if or (index .Values "wait_for_onezone" "enabled") (or (index .Values "wait_for_token_dispenser" "enabled") (index .Values "wait_for_oneprovider" "enabled")) }}
      initContainers:
      {{- end }}
      {{- if (index .Values "wait_for_onezone" "enabled") }}
        - name: wait-for-onezone
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - "{{ template "onezone_name" . }}-ready-check"
      {{- end }}
      {{- if (index .Values "wait_for_token_dispenser" "enabled") }}
        - name: wait-for-token-dispenser
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "pod"
            - >
              -lapp={{ template "token-dispenser_name" . }}
      {{- end }}
      {{- if (index .Values "wait_for_oneprovider" "enabled") }}
        - name: wait-for-oneprovider
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - "{{ template "oneprovider_name" . }}-ready-check"
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        env:
          - name: ONECLIENT_INSECURE
            value: "true"
          - name: ONECLIENT_ACCESS_TOKEN
            value: "supplied_at_runtime"
          - name: ONECLIENT_PROVIDER_HOST
            value: "{{ template "oneprovider_name" . }}"
        command:
         - "sh"
         - "-c"
         - >
           trap : TERM INT ;
           echo "source /oneclient-mount.sh" >> ~/.bashrc ;
           {{- if (index .Values "deployFromSources" "enabled") }}
             while [ ! -f /tmp/sources_ready.txt ]; do sleep 1; done ;
           {{- end }}
           ONECLIENT_PROVIDER_ID="$(curl -k https://$ONECLIENT_PROVIDER_HOST/configuration 2>/dev/null | tr ',' '\n' | grep 'providerId' | tr -d '"' | cut -d ':' -f 2)";
           echo "[main process] Connecting users to Oneprovider host=$ONECLIENT_PROVIDER_HOST id=$ONECLIENT_PROVIDER_ID";
           {{- range $user := .Values.users }}{{ if hasKey . "oneclient"  }}{{ if has $.Values.suffix $user.oneclient }}{{ if .idps }}
           {{- if (hasKey $user.idps "onepanel") }}{{ if ($user.idps.onepanel.enabled) }}
           idp=onepanel;
           {{- end }}{{- end }}
           {{- if (hasKey $user.idps "keycloak") }}{{ if ($user.idps.keycloak.enabled) }}
           idp=keycloak-rhea;
           {{- end }}{{- end }}
           ONECLIENT_ACCESS_TOKEN=$(curl --silent -k -u {{ $user.name }}:{{ $user.password }} http://{{ template "token-dispenser_name" $ }}/api/v1.0/token/$idp);
           mount_dir="/mnt/oneclient/{{ $user.name }}";
           mkdir -p "$mount_dir" ;
           mount_{{ $user.name }}() {
             touch /oneclient_mounting_{{ $user.name }} ;
             all_{{ $user.name }}_providers=$(curl  -k -sS --tlsv1.2 -H "X-Auth-Token: $1" -X GET "https://{{ template "onezone_name" $ }}/api/v3/onezone/user/effective_providers") ;
             echo "[{{ $user.name }}] List of oneproviders that support user={{ $user.name }}: $all_{{ $user.name }}_providers" ;
             if ! echo "$all_{{ $user.name }}_providers" | grep -q $ONECLIENT_PROVIDER_ID ; then
               echo "[{{ $user.name }}] User user={{ $user.name }} has no space supported by provider host=$ONECLIENT_PROVIDER_HOST id=$ONECLIENT_PROVIDER_ID.";
               while ! echo "$all_{{ $user.name }}_providers" | grep -q $ONECLIENT_PROVIDER_ID ; do
                 echo "[{{ $user.name }}] Waiting for id=$ONECLIENT_PROVIDER_ID to appear on the list of effective providers=$all_{{ $user.name }}_providers for the user={{ $user.name }}" ;
                 sleep 2 ;
                 all_{{ $user.name }}_providers=$(curl  -k -sS --tlsv1.2 -H "X-Auth-Token: $1" -X GET "https://{{ template "onezone_name" $ }}/api/v3/onezone/user/effective_providers") ;
               done ;
             fi
             echo "[{{ $user.name }}] Provider host=$ONECLIENT_PROVIDER_HOST id=$ONECLIENT_PROVIDER_ID is on the list of effective providers=$all_{{ $user.name }}_providers of user={{ $user.name }}" ;
             echo "[{{ $user.name }}] Mounting oneclient in $2 for user={{ $user.name }}, from idp=$3, using TOKEN=$1.";
             while ! mount | grep -q "$2" ; do
               oneclient -t $1 {{ $.Values.oneclientFlags }} "$2";
               i=1;
               max_i=30;
               while ! mount | grep -q "$2" && [ $i -le $max_i ] ; do echo "[{{ $user.name }}] Waiting ${i}/${max_i} time for mount $2. Sleeping for 2 seconds." ; i=$((i+1)) ; sleep 2 ; done ;
               if mount | grep -q "$2" ; then break ; else echo "[{{ $user.name }}] Failed to mount $2 retrying to run oneclient for dir=$2" ; fi ;
             done ;
             echo "[{{ $user.name }}] Mounted oneclient in '$2  ' for user={{ $user.name }}, in  dir=$2, from idp=$3, using TOKEN=$1";
             rm /oneclient_mounting_{{ $user.name }} ;
           };
           mount_{{ $user.name }} "$ONECLIENT_ACCESS_TOKEN" "$mount_dir" "$idp" &
           {{- end }}{{ end }}{{ end }}{{ end }}
           echo "[main process] Waiting for all oneclients to mount..." ;
           while find / -maxdepth 1 -name "oneclient_mounting_*" | grep -q "." ; do sleep 2 ; done ;
           echo "[main process] All clients have been mounted." ;
           touch /all_oneclients_mounted ;
           sleep infinity & wait ;
        readinessProbe:
          exec:
            command:
             - cat 
             - /all_oneclients_mounted
        securityContext:
          privileged: true
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  {{- range $user := .Values.users }}{{ if hasKey . "oneclient"  }}{{ if has $.Values.suffix $user.oneclient }}{{ if .idps }}
                  fusermount -uz "/mnt/oneclient/{{ $user.name }}" ; 
                  {{- end }}{{- end }}{{- end }}{{- end }}
                  {{- if .Values.directIO.nfs.enabled }}
                  umount -f {{ .Values.directIO.nfs.mount_path }} ;
                  {{- end }}
        volumeMounts:
          - mountPath: /oneclient-mount.sh
            subPath: oneclient-mount.sh
            name: oneclient-mount
      {{- if .Values.directIO.nfs.enabled }}
          - mountPath: {{ .Values.directIO.nfs.mount_path }}
            name: nfs
      {{- end }}
    {{- if (index .Values "jupyter" "enabled") }}
          - mountPath: /mnt/oneclient:shared
            name: oneclient
    {{- end }}
    {{- if (index .Values "jupyter" "enabled") }}
      - name: jupyter
        image: {{ .Values.jupyter.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.jupyter }}
        volumeMounts:
        - mountPath: /mnt/oneclient:shared
          name: oneclient
    {{- end }}
      volumes:
    {{- if (index .Values "jupyter" "enabled") }}
      - name: oneclient
        emptyDir: {}
    {{- end }}
      - name: oneclient-mount
        configMap:
          name: {{ template "fullname" . }}-config
    {{- if .Values.directIO.nfs.enabled }}
      - name: nfs
        persistentVolumeClaim:
          claimName: {{ template "releaseName" . }}-oneprovider-{{ .Values.suffix }}-nfs-pvc
    {{- end }}
