apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" .  }}
    heritage: {{ .Release.Service }}
    component: {{ .Chart.Name }}
  annotations:
    version: "{{ .Chart.Version }}"
data:
  panel-overlay.config: {{ toYaml .Values.panelOverlayConfig }}
  worker-overlay.config: {{ toYaml .Values.workerOverlayConfig }}
  ONEZONE_CONFIG: |-
    cluster:
      domainName: "{{ template "service_url" . }}"
      nodes:
        {{- $r := . -}}
        {{- range $i := until (int (.Values.onezone_nodes_count)) }}
        n{{ $i }}: 
          hostname: {{ template "fullname" $r }}-{{ $i }}
        {{- end }}
      managers:
        mainNode: n{{ sub (.Values.onezone_nodes_count) 1 }} 
        nodes:
    {{- with .Values.cluster_config.managers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      workers:
        nodes:
    {{- with .Values.cluster_config.workers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      databases:
        nodes:
    {{- with .Values.cluster_config.databases }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
    onezone:
      {{ if .Values.name -}}
      name: {{ .Values.name }}
      {{- else -}}
      name: {{ template "fullname" . }}
      {{- end }}
      domainName: {{ template "service_url" . }}
    {{- if or .Values.onepanelAdminUsers .Values.onepanel_users }}
    onepanel:
      users:
        {{ .Values.onezone_main_admin.name }}:
          password: {{ .Values.onezone_main_admin.password }}
          userRole: admin
        {{- range .Values.onepanel_users }}
        {{- if (hasKey .idps "onepanel") }}{{- if (hasKey .idps.onepanel "mode" ) }}{{- if and .idps.onepanel.enabled (eq .idps.onepanel.mode "config") }}
        {{ .name }}:
          password: {{ .password }}
          userRole: {{ if .idps.onepanel.type -}}{{- .idps.onepanel.type -}}{{- else -}}regular{{- end -}}
        {{- end }}{{- end }}{{- end }}
        {{- end }}
    {{- end }}

  auth.config: |-
    #{
        version => 2,
        % Allows to log in to Onezone using the account from Onepanel (user & password).
        onepanelAuthConfig => #{
            enabled => true
        },
        samlConfig => #{
            enabled => false
        },
        openidConfig => #{
            % Enable OpenID login protocol - if disabled, all OpenID IdPs will be
            % hidden from the login page.
            enabled => true,
            % Default config for every OpenID IdP, can be overridden in IdP config
            defaultProtocolConfig => #{
                % Internal plugin that will be used for handling the login process -
                % if the IdP uses standard OpenID Connect protocol,
                % default_oidc_plugin is the way to go. If not, IdP specific plugin
                % can be implemented and specified here.
                plugin => default_oidc_plugin,
                pluginConfig => #{
                    endpoints => #{
                        authorize => {xrds, "authorization_endpoint"},
                        accessToken => {xrds, "token_endpoint"},
                        userInfo => {xrds, "userinfo_endpoint"}
                    },
                    scope => "openid email profile",
                    accessTokenAcquireMethod => post,
                    clientSecretPassMethod => urlencoded,
                    accessTokenPassMethod => inAuthHeader,
                    customData => #{}
                },
                % Defines how the attributes from OpenID user info should be mapped
                % to Onedata user attributes. Attributes must correspond to existing OpenID
                % attributes.
                attributeMapping => #{
                    subjectId => {required, "sub"},
                    name => {optional, {any, ["name", "login"]}},
                    alias => {optional, "username"},
                    emails => {optional, "email"},
                    entitlements => {optional, {any, [
                        {append, ["groups", "roles"]},
                        "groups"
                    ]}},
                    custom => udefined
                },
                % Rules for mapping entitlements in IdP into entitlements in Onedata.
                entitlementMapping => #{
                    enabled => true,
                    parser => nested_entitlement_parser,
                    parserConfig => #{
                        splitWith => "/",
                        topGroupType => unit,
                        topGroupPrivilegesInVo => member,
                        subGroupsType => team,
                        subGroupsPrivilegesInParent => member,
                        userPrivileges => member
                    }
                },
                % Enables/disables authorization using access tokens from the IdP
                % Supported only in OpenID protocol
                authorityDelegation => #{
                    enabled => true
                }
            }
        },
        supportedIdps => [
            % 'onepanel' is a special id for onepanel login. The key name 'onepanel'
            % cannot be changed or used for any other IdP for the Onezone GUI to
            % work correctly.
            {onepanel, #{
                % Configuration of the login page button
                displayName => "Onepanel account",
                % Some predefined icons are available built-in into the GUI app.
                % Their paths start with /assets/images/auth-providers.
                iconPath => "/assets/images/auth-providers/onepanel.svg",
                % Background color is useful for icons with transparency. Moreover,
                % after selecting an IdP, its icon disappears and a spinner is shown -
                % hence background color should be kept the same as icon's background
                % color (if any).
                iconBackgroundColor => "#4BD187",
                % Which protocol is used for this IdP - onepanelAuth is the only
                % valid one for onepanel IdP.
                protocol => onepanelAuth
        {{- if (index .Values "keycloak" "enabled") }}
            }},
            { {{- .Values.keycloak.idpName }}, #{
                % Configuration of the login page button
                displayName => "Onedata KeyCloak",
                iconPath => "/assets/images/auth-providers/rhea.svg",
                iconBackgroundColor => "#B51017",
                % Which protocol is used for this IdP
                protocol => openid,
                % Configuration specific for OpenID protocol - overrides the default
                protocolConfig => #{
                    plugin => default_oidc_plugin,
                    pluginConfig => #{
                        clientId => "onedata",
                        clientSecret => "c9599ad1-7e79-4a59-a43f-dda70225f206",
                        endpoints => #{
                            xrds => "http://{{ template "keycloak_service_url" . }}/auth/realms/onedata/.well-known/openid-configuration"
                        }
                    },
                    entitlementMapping => #{
                        voGroupName => "{{ .Values.keycloak.voGroupId }}",
                        adminGroup => "admins"
                    },
                    authorityDelegation => #{
                        % To use an access token from this IdP, you must use a prefix
                        % to indicate the IdP of origin. With below, you can
                        % use your token using REST like this:
                        % curl -H "X-Auth-Token: onedata:lkj9s-df8af-sdf8sdf-my-access-token" ...
                        tokenPrefix => "{{ .Values.keycloak.tokenPrefix }}:"
                    }
                }
            {{- end }}
            }}
        ]
    }.
    
{{- if (index .Values "saml-idp" "enabled") }}
  saml.config: |-
    [].
{{- end }}