{{- if (index .Values "onezone_ready_check" "enabled") }}
{{- $admin_username := "admin" }}
{{- $admin_password := "password" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-ready-check
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" . }}
    heritage: {{ .Release.Service }}
    component: {{ .Chart.Name }}-ready-check
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}
        release: {{ template "releaseName" .  }}
        heritage: {{ .Release.Service }}
        component: {{ .Chart.Name }}-ready-check
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      hostNetwork: {{ template "hostNetwork" . }}
{{ include "imagePullSecrets" . | indent 6 }}
      initContainers:
      - name: wait-for-{{ .Chart.Name }}
        image: {{ .Values.wait_for.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
        command:
          - "/bin/sh"
          - "-c"
          - >
            deployed="" ;
            while [ "$deployed" != "true" ] ; do deployed="$(curl -k  -sS  -X GET 'https://{{ template "onezone_name" . }}:9443/configuration' | jq .'deployed')" ; echo "Waiting for https://{{ template "onezone_name" . }}:9443/configuration to return something..." ; echo "returned=$deployed" ; sleep 2 ; done ;
      containers:
      - name: onezone-ready-check
        image: {{ .Values.onedata_cli.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        env:
          - name: ONEZONE_HOST
            value: "https://{{ template "onezone_name" . }}"
          - name: ONEPANEL_HOST
            value: "https://{{ template "onezone_name" . }}:9443"
          - name: TERM # otherwise zsh and bash autocompletion used in this container tends to go crazy
            value: "xterm-256color"
        command:
          - "bash"
          - "-c"
          - >
            set -e ;
            echo "-k" > ~/.curlrc ; echo "-f" >> ~/.curlrc ;
            echo "ONEZONE_HOST=$ONEZONE_HOST" ;
        {{- if not .Values.global.alpha }}
          {{- /* TODO: Fix this onepanel user propagation hack */ -}}
          {{- range $user := .Values.onepanel_admin_users }}
            echo "Propagating onepanel admin user={{ $user.name }} to onezone" ;
            onezone-rest-cli -u {{ $user.name }}:{{ $user.password }} -sS --tlsv1.2 -v -w '%{http_code}' getCurrentUser ;
          {{- end }}
          {{- range $user := .Values.onepanel_users }}
          {{- $idp := (first (pluck "onepanel" $user.idps )) }}{{- if $idp }}{{- if and $idp.enabled (eq $idp.mode "config") }}
            echo "Propagating onepanel user={{ $user.name }} to onezone" ;
            onezone-rest-cli -u {{ $user.name }}:{{ $user.password }} -v -w '%{http_code}' getCurrentUser ;
          {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}
{{- end }}
